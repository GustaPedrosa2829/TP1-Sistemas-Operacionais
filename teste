#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>
#include <string.h>

#define MAX_PROCESSES 100
#define MAX_PROGRAM_LENGTH 100

typedef struct {
    char opcode;
    int value;
    char filename[256];
} Instruction;

typedef struct {
    int id;
    int parent_id;
    int program_counter;
    int integer_value;
    int priority;
    char state;
    int start_time;
    int cpu_time_used;
    Instruction program[MAX_PROGRAM_LENGTH];
} SimulatedProcess;

typedef struct {
    int current_process_id;
    SimulatedProcess processes[MAX_PROCESSES];
    int num_processes;
} SystemState;

int time_unit = 0;

void execute_instruction(Instruction instr, SimulatedProcess *process) {
    switch(instr.opcode) {
        case 'S':
            process->integer_value = instr.value;
            break;
        case 'A':
            process->integer_value += instr.value;
            break;
        case 'D':
            process->integer_value -= instr.value;
            break;
        case 'B':
            process->state = 'B';
            break;
        case 'E':
            process->state = 'E';
            break;
        case 'F':
            // Lógica para criar novo processo simulado
            printf("Comando de criação de processo. Implementação pendente.\n");
            break;
        case 'R':
            // Lógica para substituir programa do processo
            printf("Comando de substituição de programa. Implementação pendente.\n");
            break;
        default:
            printf("Instrução inválida\n");
    }
}

void print_system_state(SystemState *state) {
    printf("****************************************************************\n");
    printf("Estado do sistema:\n");
    printf("****************************************************************\n");
    printf("TEMPO ATUAL: %d\n", time_unit);
    printf("PROCESSO EXECUTANDO:\n");
    for (int i = 0; i < state->num_processes; i++) {
        SimulatedProcess *process = &state->processes[i];
        if (process->id == state->current_process_id) {
            printf("pid: %d, ppid: %d, valor: %d, estado: %c\n", process->id, process->parent_id, process->integer_value, process->state);
            break;
        }
    }
    printf("BLOQUEADO:\n");
    for (int i = 0; i < state->num_processes; i++) {
        SimulatedProcess *process = &state->processes[i];
        if (process->state == 'B') {
            printf("pid: %d, ppid: %d, valor: %d, estado: %c\n", process->id, process->parent_id, process->integer_value, process->state);
        }
    }
    printf("PROCESSOS PRONTOS:\n");
    for (int i = 0; i < state->num_processes; i++) {
        SimulatedProcess *process = &state->processes[i];
        if (process->state == 'R') {
            printf("pid: %d, ppid: %d, valor: %d, estado: %c\n", process->id, process->parent_id, process->integer_value, process->state);
        }
    }
    printf("****************************************************************\n");
}

void commander_process(int process_manager_pid) {
    char command;
    int pipe_fd[2];
    if (pipe(pipe_fd) == -1) {
        perror("Erro ao criar o pipe");
        exit(EXIT_FAILURE);
    }
    while (1) {
        scanf(" %c", &command);
        write(pipe_fd[1], &command, sizeof(char));
        if (command == 'T') {
            break;
        }
        sleep(1);
    }
    close(pipe_fd[1]);
}

void process_manager_process(SystemState *state) {
    char command;
    int pipe_fd[2];
    if (pipe(pipe_fd) == -1) {
        perror("Erro ao criar o pipe");
        exit(EXIT_FAILURE);
    }
    while (1) {
        read(pipe_fd[0], &command, sizeof(char));
        switch(command) {
            case 'Q':
                // Avançar no tempo e atualizar o estado dos processos
                time_unit++;
                for (int i = 0; i < state->num_processes; i++) {
                    SimulatedProcess *process = &state->processes[i];
                    if (process->state == 'R') {
                        process->state = 'E'; // Mudar o estado para "executando"
                        state->current_process_id = process->id; // Atualizar o ID do processo em execução
                        execute_instruction(process->program[process->program_counter], process);
                        process->program_counter++;
                        if (process->program_counter >= MAX_PROGRAM_LENGTH) {
                            process->state = 'E'; // Se o programa chegou ao fim, o processo é encerrado
                        } else {
                            process->state = 'R'; // Voltar para o estado "pronto" após a execução
                        }
                    }
                }
                break;
            case 'U':
                // Implementar desbloqueio
                break;
            case 'P':
                print_system_state(state);
                break;
            case 'T':
                close(pipe_fd[0]);
                exit(EXIT_SUCCESS);
                break;
            default:
                printf("Comando inválido\n");
        }
    }
}


void reporter_process(SystemState *state) {
    while (1) {
        print_system_state(state);
        sleep(1);
    }
}

// Função para carregar os processos a partir de um arquivo
void load_processes_from_file(SystemState *state, const char *filename) {
    FILE *file = fopen(filename, "r");
    if (file == NULL) {
        perror("Erro ao abrir o arquivo");
        exit(EXIT_FAILURE);
    }

    // Ler os processos do arquivo e carregar para o estado do sistema
    int process_id = 0;
    while (!feof(file)) {
        SimulatedProcess *process = &state->processes[state->num_processes];
        process->id = process_id++;
        process->parent_id = -1; // Indicando que não há pai definido ainda
        process->program_counter = 0;
        process->integer_value = 0;
        process->priority = 0;
        process->state = 'R'; // Inicialmente pronto
        process->start_time = 0;
        process->cpu_time_used = 0;

        int num_instructions;
        fscanf(file, "%d", &num_instructions);
        for (int i = 0; i < num_instructions; i++) {
            Instruction instr;
            fscanf(file, " %c", &instr.opcode);
            if (instr.opcode == 'S' || instr.opcode == 'A' || instr.opcode == 'D') {
                fscanf(file, "%d", &instr.value);
            } else if (instr.opcode == 'R') {
                fscanf(file, "%s", instr.filename);
            }
            process->program[i] = instr;
        }

        state->num_processes++;
    }

    fclose(file);
}

int main() {
    // Carregar os processos a partir de um arquivo
    SystemState state;
    load_processes_from_file(&state, "processes.txt");

    // Crie os processos Commander, Process Manager e Reporter
    pid_t commander_pid, manager_pid, reporter_pid;
    manager_pid = fork();
    if (manager_pid == -1) {
        perror("Erro ao criar o processo Process Manager");
        exit(EXIT_FAILURE);
    } else if (manager_pid == 0) {
        process_manager_process(&state);
    } else {
        commander_pid = fork();
        if (commander_pid == -1) {
            perror("Erro ao criar o processo Commander");
            exit(EXIT_FAILURE);
        } else if (commander_pid == 0) {
            commander_process(manager_pid);
        } else {
            reporter_pid = fork();
            if (reporter_pid == -1) {
                perror("Erro ao criar o processo Reporter");
                exit(EXIT_FAILURE);
            } else if (reporter_pid == 0) {
                reporter_process(&state);
            } else {
                waitpid(commander_pid, NULL, 0);
                waitpid(manager_pid, NULL, 0);
                waitpid(reporter_pid, NULL, 0);
            }
        }
    }

    return 0;
}
